// Generated by CoffeeScript 1.10.0
(function() {
  var PresentationFramework, _, fm, fs, handlebars, load_collection, log, log_colours, logger, mkdirp, path, pick_slides, save_deck, slidewinder, yaml;

  fs = require('fs');

  path = require('path');

  fm = require('front-matter');

  handlebars = require('handlebars');

  _ = require('lodash');

  mkdirp = require('mkdirp');

  logger = require('./log.js');

  yaml = require('js-yaml');

  log_colours = {
    silly: 'magenta',
    input: 'grey',
    verbose: 'cyan',
    prompt: 'grey',
    debug: 'blue',
    info: 'green',
    data: 'grey',
    help: 'cyan',
    warn: 'yellow',
    error: 'red'
  };

  load_collection = function(dirpath) {
    var collection;
    collection = {};
    fs.readdirSync(dirpath).forEach(function(file) {
      var data, filepath, name, slide;
      filepath = path.resolve(dirpath, file);
      data = fs.readFileSync(filepath, 'utf8');
      slide = fm(data);
      name = slide.attributes.name;
      if (collection[name]) {
        return log.error('Multiple slides have the name', name);
      } else {
        return collection[name] = slide;
      }
    });
    log.info('Loaded', Object.keys(collection).length, 'markdown slide files from', dirpath);
    return collection;
  };

  pick_slides = function(collection, selections) {
    var picked;
    picked = [];
    selections.forEach(function(selection) {
      var slide;
      slide = collection[selection];
      if (slide) {
        return picked.push(slide);
      } else {
        return log.error('No slide found with name', name);
      }
    });
    log.info('Picked', picked.length, 'slides from collection');
    return picked;
  };

  PresentationFramework = (function() {
    function PresentationFramework(framework) {
      log.info('Looking for presentation framework module: ', framework);
      this.template = fs.readFileSync(path.join(framework, 'template.html'), 'utf8');
      this.renderer = handlebars.compile(this.template);
      this.helpers = require(path.join(framework, 'helpers.js'));
      this.render_deck = (function(_this) {
        return function(data) {
          var deck;
          Object.keys(_this.helpers).forEach(function(key) {
            return handlebars.registerHelper(key, _this.helpers[key]);
          });
          deck = _this.renderer(data);
          return deck;
        };
      })(this);
      this;
    }

    return PresentationFramework;

  })();

  save_deck = function(deck, data) {
    var datapath, deckpath, msg;
    mkdirp(data.output);
    deckpath = path.resolve(data.output, 'index.html');
    fs.writeFileSync(deckpath, deck);
    datapath = path.resolve(data.output, 'deck.json');
    fs.writeFileSync(datapath, JSON.stringify(data, null, 2));
    msg = 'Deck (index.html) and Data (deck.json) saved to ';
    return log.info(msg, data.output);
  };

  slidewinder = function(sessiondata) {
    var allslides, deck, plugin;
    allslides = load_collection(sessiondata.collection);
    sessiondata.slideset = pick_slides(allslides, sessiondata.slides);
    plugin = new PresentationFramework(sessiondata.framework);
    deck = plugin.render_deck(sessiondata);
    return save_deck(deck, sessiondata);
  };

  log = logger();

  module.exports = slidewinder;

}).call(this);
